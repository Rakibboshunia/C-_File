#include <iostream>
#include <vector>
#include <string>
#include <fstream>

using namespace std;

// Define a structure to represent a meal
struct Meal 
{
    string name;
    string date;
    string description;
};

// Function to display the menu
void displayMenu() 
{
    cout << "1. Add Meal\n";
    cout << "2. View Meals\n";
    cout << "3. Delete Meal\n";
    cout << "4. Save Meals\n";
    cout << "5. Quit\n";
}

// Function to add a meal to the vector
void addMeal(vector<Meal>& meals) 
{
    Meal meal;
    cout << "Enter meal name: ";
    getline(cin, meal.name);

    cout << "Enter date (YYYY-MM-DD): ";
    getline(cin, meal.date);
    
    cout << "Enter meal description: ";
    getline(cin, meal.description);

    meals.push_back(meal);
    cout << "Meal added successfully!\n";
}

// Function to view all meals in the vector
void viewMeals(const vector<Meal>& meals) 
{
    if (meals.empty()) 
    {
        cout << "No meals available.\n";
    } 
    else 
    {
        cout << "Meals:\n";
        for (const Meal& meal : meals) 
        {
            cout << "Name: " << meal.name << "\n";
            cout << "Date: " << meal.date << "\n";
            cout << "Description: " << meal.description << "\n\n";
        }
    }
}

// Function to delete a meal from the vector
void deleteMeal(vector<Meal>& meals) 
{
    if (meals.empty()) 
    {
        cout << "No meals available to delete.\n";
    } 
    else 
    {
        int index;
        cout << "Enter the index of the meal to delete: ";
        cin >> index;

        if (index >= 0 && index < meals.size()) 
        {
            meals.erase(meals.begin() + index);
            cout << "Meal deleted successfully!\n";
        }
        else 
        {
            cout << "Invalid index.\n";
        }
    }
}

// Function to save meals to a file
void saveMeals(const vector<Meal>& meals, const string& filename) 
{
    ofstream outfile(filename);

    if (outfile.is_open()) 
    {
        for (const Meal& meal : meals) 
        {
            outfile << meal.name << ',' << meal.description << ',' << meal.date << '\n';
        }
        cout << "Meals saved successfully!\n";
        outfile.close();
    } 
    else 
    {
        cout << "Unable to open the file for saving.\n";
    }
}

// Function to load meals from a file
void loadMeals(vector<Meal>& meals, const string& filename) 
{
    ifstream infile(filename);

    if (infile.is_open()) 
    {
        meals.clear();
        Meal meal;

        while (getline(infile, meal.name, ',') &&
               getline(infile, meal.date, ',') &&
               getline(infile, meal.description))
        {
            meals.push_back(meal);
        }

        cout << "Meals loaded successfully!\n";
        infile.close();
    } 
    else 
    {
        cout << "Unable to open the file for loading.\n";
    }
}

int main() 
{
    vector<Meal> meals;

    int choice;

    do 
    {
        displayMenu();
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // Consume the newline character after entering the choice

        switch (choice) 
        {
            case 1:
                addMeal(meals);
                break;
            case 2:
                viewMeals(meals);
                break;
            case 3:
                deleteMeal(meals);
                break;
            case 4:
                saveMeals(meals, "meals.txt");
                break;
            case 5:
                cout << "Exiting the program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } 
    while (choice != 5);

    return 0;
}
